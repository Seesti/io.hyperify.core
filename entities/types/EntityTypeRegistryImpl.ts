// Copyright (c) 2023. Heusala Group Oy <info@heusalagroup.fi>. All rights reserved.

import { has } from "../../functions/has";
import { Entity } from "./Entity";
import {
    EntityType,
    isEntityType,
} from "./EntityType";
import { EntityTypeRegistry } from "./EntityTypeRegistry";

/**
 *
 */
export class EntityTypeRegistryImpl
    implements EntityTypeRegistry
{


    ////////////////////////////////////////////////////////////////////////////
    //////////////////////////  private properties  ////////////////////////////
    ////////////////////////////////////////////////////////////////////////////


    private _entities : {
        [key: string]: EntityType<any, Entity<any>>
    } = {};


    ////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////  #create  //////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////


    /**
     * Create an empty registry.
     */
    public static create () : EntityTypeRegistryImpl {
        return new EntityTypeRegistryImpl();
    }


    ////////////////////////////////////////////////////////////////////////////
    /////////////////////////////  #constructor  ///////////////////////////////
    ////////////////////////////////////////////////////////////////////////////

    /**
     * Construct an empty registry.
     *
     * @protected
     */
    protected constructor () {
        this._entities = {};
    }


    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////  #destroy  ////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////


    /**
     * @inheritDoc
     */
    public destroy () : this {
        this._entities = {};
        return this;
    }


    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////  #deleteByName  ///////////////////////////////
    ////////////////////////////////////////////////////////////////////////////


    /**
     * @inheritDoc
     */
    public deleteType ( name : string) : this {
        if ( has(this._entities, name) ) {
            delete this._entities[name];
        }
        return this;
    }


    ////////////////////////////////////////////////////////////////////////////
    ///////////////////////////  #hasEntityType  ///////////////////////////////
    ////////////////////////////////////////////////////////////////////////////


    /**
     * @inheritDoc
     */
    public hasType ( name : string) : boolean {
        return has(this._entities, name);
    }


    ////////////////////////////////////////////////////////////////////////////
    //////////////////////////  #findEntityType  ///////////////////////////////
    ////////////////////////////////////////////////////////////////////////////


    /**
     * @inheritDoc
     */
    public findType ( name : string) : EntityType<any, Entity<any>> | undefined {
        if ( !has(this._entities, name) ) {
            return undefined;
        }
        return this._entities[name];
    }


    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////  #registerType  ///////////////////////////////
    ////////////////////////////////////////////////////////////////////////////


    /**
     * @inheritDoc
     */
    public registerType (
        name : string,
        Type: EntityType<any, Entity<any>>,
    ) : this {
        if (has(this._entities, name)) {
            throw new TypeError(`EntityTypeRegistryImpl.registerType: Type exists already: ${name}`);
        }
        if (!isEntityType(Type)) {
            throw new TypeError(`EntityTypeRegistryImpl.registerType: Type not EntityType: ${Type}`);
        }
        this._entities[name] = Type;
        return this;
    }


}
